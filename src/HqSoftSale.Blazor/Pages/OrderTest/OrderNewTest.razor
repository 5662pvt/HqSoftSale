@page "/ordersTest"

@using Blazorise.Components
@using HqSoftSale.OrderDetails;
@using HqSoftSale.Orders;
@using HqSoftSale.Localization;
@using HqSoftSale.Products;
@using Microsoft.Extensions.Localization;
@using Volo.Abp.Application.Dtos;
@using Volo.Abp.AspNetCore.Components.Web;

@inherits AbpCrudPageBase<IOrderAppService, OrderDto, Guid, PagedAndSortedResultRequestDto, CreateUpdateOrderDto>
@inject IStringLocalizer<HqSoftSaleResource> L
@inject AbpBlazorMessageLocalizerHelper<HqSoftSaleResource> LH
@inject IOrdDetailAppService OrderDetailAppService
@inject IOrderAppService OrderAppService
@inject IProductAppService ProductAppService
@inject NavigationManager NavigationManager


<Row Spacing="2" xs="1">
    <Span />
    <Column>
    </Column>
    <Column>
    </Column>
    <Column>
    </Column>
    <Column Style="padding:10px 10px 10px 120px">
        <Row Spacing="2" xs="1">
            <Span />
            <Column>
            </Column>
            <Column>
            </Column>
            <Column>
            </Column>
            <Column Style="padding:10px 10px 10px 120px">
                <Button Color="Color.Primary" Clicked="CreateEntityAsync">
                    <Icon Name="IconName.Save" IconStyle="IconStyle.Regular" /> @L["Save"]
                </Button>
            </Column>
        </Row>
    </Column>
</Row>
<Row>
    <Column>
        <Card>
            <CardBody>
                <Validations @ref="@CreateValationRef" Model="@NewEntity" ValidateOnLoad="false">
                    <Row Style="padding-bottom:15px">
                        <Column ColumnSize="ColumnSize.Is4">            
                                <Text>Order Number</Text>
                                <Field>                               
                                    <div class="d-flex align-items-center" style="position: relative; display: inline-block; right: 0;">
                                    <TextEdit Placeholder="<New>"  @bind-Text="@NewEntity.OrderNumber" CssClass="mr-2" />
                                        <DxButton  CssClass="position-absolute top-0 bottom-0 left-0 btn-lg" style="right: 0;" RenderStyle="ButtonRenderStyle.Secondary" Click="@TogglePopupVisibilityAsync">
                                            <Icon IconType="IconType.Solid" IconName="fa-save" />
                                        </DxButton>
                                    </div>

                                @*    <DxTextBox Placeholder="<New>"
                                               @bind-Text="@NewEntity.OrderNumber"
                                           
                                               CssClass="dx-demo-editor-width">
                                        <Buttons>
                                            <DxEditorButton IconCssClass="editor-icon editor-icon-mail"
                                                            Tooltip="Send Email"
                                                            Click="@TogglePopupVisibilityAsync" />
                                        </Buttons>
                                    </DxTextBox>*@

                                  @*  <DxComboBox TData="ProductDto" TValue="string" Data="@products" ValueFieldName="ProductID" TextFieldName="ProductID"
                                                FilteringMode="DataGridFilteringMode.Contains" ValueChanged="((item) => {
                                                    var product = products.FirstOrDefault(p => p.ProductID == item);
                                                    if (product != null) {
                                                                NewDetailEntity.ProductID = product.ProductID;
                                                                NewDetailEntity.ProductName = product.ProductName;
                                                                NewDetailEntity.Quantity = NewDetailEntity.Quantity;
                                                                NewDetailEntity.Price = product.Price;
                                                    }})">
                                        <Buttons>
                                            <div id="dropdown-customization-target-container">
                                                <DxEditorButton IconCssClass="editor-icon editor-icon-add"
                                                                Tooltip="+"
                                                                Click="() => IsOpen = !IsOpen" />
                                            </div>
                                        </Buttons>
                                        <Columns>
                                            <DxListEditorColumn FieldName="@nameof(ProductDto.ProductID)"
                                                                Caption="ProductID" />
                                            <DxListEditorColumn FieldName="@nameof(ProductDto.ProductName)"
                                                                Caption="ProductName" />
                                            <DxListEditorColumn FieldName="@nameof(ProductDto.Price)"
                                                                Caption="" />
                                        </Columns>
                                    </DxComboBox>*@

                            @*    <DxComboBox TData="OrderDto" TValue="string" Data="@orders" ValueFieldName="OrderNumber" TextFieldName="OrderNumber"
                                            FilteringMode="DataGridFilteringMode.Contains" ValueChanged="((item) => {
                                                    var order = orders.FirstOrDefault(p => p.OrderNumber == item);
                                                    if (order != null) {
                                                            GoToEditPage(order);  
                                                    }})">                                                                     
                                </DxComboBox>*@
                               </Field>                           
                        </Column>
                        <Column ColumnSize="ColumnSize.Is4">
                            <Text>Status</Text>
                            <Select TValue="OrderStatus" @bind-SelectedValue="@NewEntity.OrderStatus">
                                @foreach (int order in Enum.GetValues(typeof(OrderStatus)))
                                {
                                    <SelectItem Value="@((OrderStatus)order)">
                                        @L[$"Enum:OrderStatus.{order}"]
                                    </SelectItem>
                                }
                            </Select>
                        </Column>
                    </Row>
                    <Row>
                        <Column>
                            <Tabs SelectedTab="order">

                                <Content>
                                    <TabPanel Name="order">

                                        <Row Style="padding-bottom:15px">
                                            <Column ColumnSize="ColumnSize.Is4">
                                                <Text>Order Date</Text>
                                                <Field>
                                                    <DateEdit TValue="DateTime" @bind-Date="NewEntity.OrderDate" />
                                                </Field>
                                            </Column>

                                            <Column ColumnSize="ColumnSize.Is4">
                                                <Column ColumnSize="ColumnSize.Is4">
                                                    <Text>Customer </Text>
                                                    <Field>
                                                        <TextEdit Placeholder="Customer1" @bind-Text="@NewEntity.Customer" />
                                                    </Field>
                                                </Column>
                                            </Column>
                                        </Row>
                                    </TabPanel>
                                </Content>
                            </Tabs>
                        </Column>
                    </Row>
                    <Validations @ref="@CreateValationRef" Model="@NewDetailEntity" ValidateOnLoad="false">
                        <DataGrid TItem="OrdDetailDto"
                                  Editable
                                  ShowPager
                                  EditMode="Blazorise.DataGrid.DataGridEditMode.Inline"
                                  CommandMode="DataGridCommandMode.ButtonRow">
                            <DataGridColumns>
                                <DataGridColumn Field="@nameof(NewDetailEntity.OrderID)" Caption="ProductName" Editable>
                                    <EditTemplate>
                                        <Autocomplete TItem="ProductDto"
                                                      TValue="string"
                                                      Data="@products"
                                                      TextField="@((item) => item?.ProductName)"
                                                      ValueField="@((item) => item?.ProductID)"
                                                      Placeholder="Search..."
                                                      Filter="AutocompleteFilter.StartsWith"
                                                                FreeTyping
                                                      CustomFilter="@((item, searchValue) => item.ProductName.IndexOf(searchValue, 0, StringComparison.CurrentCultureIgnoreCase) >= 0)"
                                                      SelectedValueChanged="@((item) => {
                                                                        var product = products.FirstOrDefault(p => p.ProductID == item);
                                                                        if (product != null) {
                                                                                    NewDetailEntity.ProductID = product.ProductID;
                                                                                    NewDetailEntity.ProductName = product.ProductName;
                                                                                    NewDetailEntity.Type = product.Type;
                                                                                    NewDetailEntity.UnitType = product.UnitType;
                                                                                    NewDetailEntity.Quantity = NewDetailEntity.Quantity;
                                                                                    NewDetailEntity.Price = product.Price;
                                                                        }})">
                                        </Autocomplete>
                                    </EditTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn Field="@nameof(NewDetailEntity.OrderID)" Caption="Order Number">
                                    <DisplayTemplate>
                                        <TextEdit @bind-Text="@NewDetailEntity.OrderID"></TextEdit>
                                    </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn Field="@nameof(NewDetailEntity.ProductID)" Caption="Product ID">
                                    <DisplayTemplate>
                                        <TextEdit @bind-Text="@NewDetailEntity.ProductID"></TextEdit>
                                    </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn Field="@nameof(NewDetailEntity.ProductName)" Caption="ProductName">
                                    <DisplayTemplate>
                                        <TextEdit @bind-Text="@NewDetailEntity.ProductName"></TextEdit>
                                    </DisplayTemplate>
                                    </DataGridColumn>
                                    <DataGridColumn Caption="WarehouseType ">
                                    <DisplayTemplate>
                                        <Select TValue="WarehouseType" @bind-SelectedValue="@NewDetailEntity.Type">
                                            @foreach (int WareHouseTypeValue in Enum.GetValues(typeof(WarehouseType)))
                                            {
                                                <SelectItem TValue="WarehouseType" Value="@((WarehouseType) WareHouseTypeValue)">
                                                    @L[$"Enum:WarehouseType.{WareHouseTypeValue}"]
                                                </SelectItem>
                                            }
                                        </Select>
                                    </DisplayTemplate>
                                </DataGridColumn>
                                <DataGridColumn Caption="UnitType ">
                                    <DisplayTemplate>
                                        <Select TValue="UnitType" @bind-SelectedValue="@NewDetailEntity.UnitType">
                                            @foreach (int UnitTypeValue in Enum.GetValues(typeof(UnitType)))
                                            {
                                                <SelectItem TValue="UnitType" Value="@((UnitType) UnitTypeValue)">
                                                    @L[$"Enum:UnitType.{UnitTypeValue}"]
                                                </SelectItem>
                                            }
                                        </Select>
                                    </DisplayTemplate>
                                </DataGridColumn>

                                <DataGridColumn Field="@nameof(NewDetailEntity.Quantity)" Caption="Quanity" Editable>
                                    <EditTemplate>
                                        <NumericPicker TValue="int" Value="NewDetailEntity.Quantity" ValueChanged="@UpdateTotal" />
                                    </EditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Field="@nameof(NewDetailEntity.Price)" Caption="Price" Editable>
                                    <EditTemplate>
                                        <NumericPicker TValue="double" @bind-Value="@NewDetailEntity.Price" />
                                    </EditTemplate>
                                </DataGridColumn>
                                <DataGridColumn Field="@nameof(NewDetailEntity.ExtenedAmount)" Caption="ExtenedAmount" Editable>
                                    <EditTemplate>
                                        <NumericPicker TValue="double" @bind-Value="@NewDetailEntity.ExtenedAmount" />
                                    </EditTemplate>
                                </DataGridColumn>
                            </DataGridColumns>
                            <ButtonRowTemplate>
                                <Button Color="Color.Success" Clicked="context.NewCommand.Clicked">New</Button>
                                <Button Color="Color.Link" Clicked="context.ClearFilterCommand.Clicked">Clear Filter</Button>
                            </ButtonRowTemplate>
                        </DataGrid>
                    </Validations>
                </Validations>
            </CardBody>
        </Card>
    </Column>
</Row>

<DxWindow @ref=windowRef
          AllowResize="true"
          ShowCloseButton="true"
          CloseOnEscape="true"
          HeaderText="Edit Contact"
          FooterText="Footer"
          ShowFooter="true"
          Width="max(25vw, 250px)"
          MinWidth="900"
          MinHeight="400"
          MaxWidth="1200"
          MaxHeight="1000"
          @bind-Visible=windowVisible>
    <BodyContentTemplate>
        <FormListOrder />
    </BodyContentTemplate>
    <FooterContentTemplate>
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Primary" Text="OK" Click="@context.CloseCallback" />
        <DxButton CssClass="popup-button my-1 ms-2" RenderStyle="ButtonRenderStyle.Secondary" Text="Cancel" Click="@context.CloseCallback" />
    </FooterContentTemplate>
</DxWindow>


@code {
    DxWindow windowRef;
    ElementReference popupTarget;
    bool windowVisible;
    //string GetButtonText() => !windowVisible ? "SHOW" : "CLOSE A WINDOW";
    async Task TogglePopupVisibilityAsync()
    {
        if (windowVisible)
            await windowRef.CloseAsync();
        else
            await windowRef.ShowAtAsync(popupTarget);
    }
}


